%%% -------------------------------------------------------------------
%%% Author  : joqerlang
%%% Description :
%%% load,start,stop unload applications in the pods vm
%%% supports with services
%%% Created : 10 dec 2012
%%% -------------------------------------------------------------------
-module(host_server).  

-behaviour(gen_server).  

%% --------------------------------------------------------------------
%% Include files
%% --------------------------------------------------------------------
-include_lib("kernel/include/logger.hrl").

%% --------------------------------------------------------------------
-define(SERVER,?MODULE).
-define(LogDir,"logs").
%% External exports
-export([
	
	 create_pod/0,
	 delete_pod/1,
	 read_state/0,
	 ping/0
	]).


-export([
	 start/0,
	 stop/0
	]).


-export([init/1, handle_call/3,handle_cast/2, handle_info/2, terminate/2, code_change/3]).

-record(state, {
		pods
	       }).

%% ====================================================================
%% External functions
%% ====================================================================


%% ====================================================================
%% Server functions
%% ====================================================================
%% Gen server functions

start()-> gen_server:start_link({local, ?SERVER}, ?SERVER, [], []).
stop()-> gen_server:call(?SERVER, {stop},infinity).

%% ====================================================================
%% Application handling
%% ====================================================================


%%---------------------------------------------------------------
%% Function:create_pod
%% @doc:creates a pod          
%% @param: non
%% @returns:{ok,PodVm,PodDir}|{error,Reason}
%%
%%---------------------------------------------------------------
-spec create_pod()-> {ok,atom(),string()}|{error,term()}.
create_pod()->
    gen_server:call(?SERVER, {create_pod},infinity).
%%---------------------------------------------------------------
%% Function:delete_pod
%% @doc:delete pod PodNode and PodDir          
%% @param: PodNode
%% @returns:ok|{error,Reason}
%%
%%---------------------------------------------------------------
-spec delete_pod(atom())-> ok|{error,term()}.
delete_pod(PodNode)->
    gen_server:call(?SERVER, {delete_pod,PodNode},infinity).



%%---------------------------------------------------------------
%% Function:template()
%% @doc: service spec template  list of {app,vsn} to run      
%% @param: 
%% @returns:[{app,vsn}]
%%
%%---------------------------------------------------------------
%-spec template()-> [{atom(),string()}].
%template()->
 %   gen_server:call(?SERVER, {template},infinity).


%% ====================================================================
%% Support functions
%
%%---------------------------------------------------------------
%% Function:read_state()
%% @doc: read theServer State variable      
%% @param: non 
%% @returns:State
%%
%%---------------------------------------------------------------
-spec read_state()-> term().
read_state()->
    gen_server:call(?SERVER, {read_state},infinity).
%% 
%% @doc:check if service is running
%% @param: non
%% @returns:{pong,node,module}|{badrpc,Reason}
%%
-spec ping()-> {atom(),node(),module()}|{atom(),term()}.
ping()-> 
    gen_server:call(?SERVER, {ping},infinity).

%% ====================================================================
%% Gen Server functions
%% ====================================================================
%% --------------------------------------------------------------------
%% Function: init/1
%% Description: Initiates the server
%% Returns: {ok, State}          |
%%          {ok, State, Timeout} |
%%          ignore               |
%%          {stop, Reason}
%% --------------------------------------------------------------------
init([]) ->
  
 %   io:format("common ~p~n",[application:start(common)]),
 %   io:format("nodelog ~p~n",[application:start(nodelog)]),
 %   nodelog_server:create(?LogDir),
%    io:format("sd_app ~p~n",[application:start(sd_app)]),
 %   io:format("config ~p~n",[application:start(config_app)]),

    CommonR=application:start(common),
    ok=application:start(nodelog),
    nodelog_server:create(?LogDir),
    nodelog_server:log(notice,?MODULE_STRING,?LINE,{"Result start common ",CommonR}),
    nodelog_server:log(notice,?MODULE_STRING,?LINE,{"Result start sd_app ",application:start(sd_app)}),
    nodelog_server:log(notice,?MODULE_STRING,?LINE,{"Result start config_app ",application:start(config_app)}),
    nodelog_server:log(notice,?MODULE_STRING,?LINE,"server successfully started"),

    {ok, #state{ pods=[]}
    }.

%% --------------------------------------------------------------------
%% Function: handle_call/3
%% Description: Handling call messages
%% Returns: {reply, Reply, State}          |
%%          {reply, Reply, State, Timeout} |
%%          {noreply, State}               |
%%          {noreply, State, Timeout}      |
%%          {stop, Reason, Reply, State}   | (terminate/2 is called)
%%          {stop, Reason, State}            (terminate/2 is called)
%% --------------------------------------------------------------------



handle_call({create_pod},_From, State) ->
    UniqueNodeName=integer_to_list(erlang:system_time(microsecond),36),
    PodDir=UniqueNodeName++".pod_dir",
    ok=file:make_dir(PodDir),
    {ok,PodNode}=lib_vm:create(UniqueNodeName),
     case config:application_gitpath(ApplId) of
		       {error,Err}->
			  nodelog_server:log(warning,?MODULE_STRING,?LINE,
					     {"Error when geting gitpath to application ",ApplId,' ', {error,Err}}),
			  {error,Err};
		      {ok,GitPath}->
			  case rpc:call(Node,service,load,[ApplId,ApplVsn,GitPath],20*5000) of
			      {error,Reason}->
				  nodelog_server:log(warning,?MODULE_STRING,?LINE,{"Error when loading service ",ApplId,' ', {error,Reason}}),
				  {error,Reason};
			      ok ->
				  nodelog_server:log(notice,?MODULE_STRING,?LINE,
						     {"Application  succesfully loaded ",ApplId,' ',ApplVsn,' ',Node}),
				  case rpc:call(Node,service,start,[ApplId,ApplVsn],20*5000) of
				      ok->
					  nodelog_server:log(notice,?MODULE_STRING,?LINE,
							     {"Application  succesfully started ",ApplId,' ',ApplVsn,' ',Node}),
					  ok;
				      Error ->
					  nodelog_server:log(notice,?MODULE_STRING,?LINE,
							     {"Error whenstarting application ",ApplId,' ',Error}),
					  Error					      
				  end
			  end	
		  end	  
	  end,



    NewState=State#state{pods=[{PodNode,PodDir,date(),time()}|State#state.pods]},
    Reply={ok,PodNode,PodDir},
    {reply, Reply, NewState};

handle_call({delete_pod,PodNode},_From, State) ->
   Reply=case lists:keyfind(PodNode,1,State#state.pods) of
	      false->
		  nodelog_server:log(warning,?MODULE_STRING,?LINE,{"Pod not exists ",{error,[eexists,PodNode]}}),
		 NewState=State,		 
		 {error,[eexists,PodNode]};
	     {PodNode,PodDir,_,_}->
		 lib_vm:delete(PodNode,PodDir),
		 NewState=State#state{pods=lists:keydelete(PodNode,1,State#state.pods)},
		 ok		 
	  end,
    {reply, Reply, NewState};


handle_call({ping},_From, State) ->
    Reply=pong,
    {reply, Reply, State};

handle_call({stopped},_From, State) ->
    Reply=ok,
    {reply, Reply, State};


handle_call({not_implemented},_From, State) ->
    Reply=not_implemented,
    {reply, Reply, State};

handle_call({stop}, _From, State) ->
    {stop, normal, shutdown_ok, State};

handle_call(Request, From, State) ->
    %rpc:cast(node(),log,log,[?Log_ticket("unmatched call",[Request, From])]),
    Reply = {ticket,"unmatched call",Request, From},
    {reply, Reply, State}.

%% --------------------------------------------------------------------
%% Function: handle_cast/2
%% Description: Handling cast messages
%% Returns: {noreply, State}          |
%%          {noreply, State, Timeout} |
%%          {stop, Reason, State}            (terminate/2 is called)
%% --------------------------------------------------------------------


handle_cast(_Msg, State) ->
  %  rpc:cast(node(),log,log,[?Log_ticket("unmatched cast",[Msg])]),
    {noreply, State}.

%% --------------------------------------------------------------------
%% Function: handle_info/2
%% Description: Handling all non call/cast messages
%% Returns: {noreply, State}          |
%%          {noreply, State, Timeout} |
%%          {stop, Reason, State}            (terminate/2 is called)
%% --------------------------------------------------------------------
handle_info(_Info, State) ->
    %rpc:cast(node(),log,log,[?Log_ticket("unmatched info",[Info])]),
    {noreply, State}.

%% --------------------------------------------------------------------
%% Function: terminate/2
%% Description: Shutdown the server
%% Returns: any (ignored by gen_server)
%% --------------------------------------------------------------------
terminate(_Reason, _State) ->
    ok.

%% --------------------------------------------------------------------
%% Func: code_change/3
%% Purpose: Convert process state when code is changed
%% Returns: {ok, NewState}
%% --------------------------------------------------------------------
code_change(_OldVsn, State, _Extra) ->
    {ok, State}.

%% --------------------------------------------------------------------
%%% Internal functions
%% --------------------------------------------------------------------

		  
